# for 문
'''
: 동일한 명령어 및 비슷한 패턴의 명령어를
반복시켜서 동작해야 할 경우 사용하는 구문

: 반복 가능한 객체의 요소들의
처음부터 마지막까지
차례대로 변수에 대입하여 반복문을 수행

 for 변수(어디에 가져올까?) in 반복 가능한 객체(어디서가져와?):
 (들여쓰기) 반복할 명령문 

* 반복가능한 객체
(리스트, 튜플, 딕셔너리, 문자열)

while문의 가독성이 좀 떨어짐!
왜? 시작문,조건문이 있어야 함!

-> for 문 (간결하게 반복 가능!)
: 반복가능한 객체 안의 수만큼 반복!


while : 조건을 비교하여 반복
for문 : 횟수에 따라서 반복 

in 6_1_1

# 딕셔너리?
# 딕셔너리 자체를 반복 : key값만 반복!
# value 값은 어떻게 가져올까..?


dict1 = {1:"python",2:"java",3:"Zython"}
for key in dict1:
    print(key)

# .values() 사용!

dict1 = {1:"python",2:"java",3:"Zython"}
for value in dict1.values():
    print(value)


# key,value 를 동시에 뽑아서, 동시에 출력?
# items()
# key , value 동시에 뽑아오는 내장함수


dict1 = {1:"python",2:"java",3:"Zython"}
#[(1,"python"),(2,"java"),(3,"Zython")]
for key, value in dict1.items():
    print(key, " ",value)

'''


# range
'''
: 원하는 숫자의 범위를 객체형식으로 돌려준다.

ex) range(숫자)
0,1,2,3,4...(숫자) 반복이 가능한 객체
-> 리스트 형태 변경 사용가능!
0부터 (숫자-1)까지 반복 가능한 객체 생성!!

1~5까지 반복이 가능한 객체 생성
range(1,6)
: 1부터 숫자-1 까지 반복가능한 객체 뿅


Q. 10부터 50까지 반복하는 객체 생성
=> range(10,51)
'''

# 구구단 출력~ 3단! range 이용!
#range()
# 출력  : 3*1=3

# -> 7_1_1 참고

'''
예문) 7_1_1 답 
다음의 요구사항에 따라 프로그램을 작성하시요
요구사항:
시험을 치른 후, 맞은 개수를 알려주는 프로그램이다.
사용자의 이름과 문제의 개수를 입력하고, 문제를 맞혔는지 아닌지를
입력하면 맞은 개수를 출력해준다.
for문을 이용해서 프로그램을 작성해보자
'테스트'
>>>
이름 : 수진
문제 개수 : 6
****************
1번 문제를 해결했나요?(y/n)
y
2번 문제를 해결했나요?(y/n)
y
3번 문제를 해결했나요?(y/n)
n
4번 문제를 해결했나요?(y/n)
y
5번 문제를 해결했나요?(y/n)
y
6번 문제를 해결했나요?(y/n)
n
******************
수진 학생, 총 4문제를 해결했습니다.
>>>













